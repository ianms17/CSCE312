// File: CPU.hdl
// Author: Ian Stephenson
// Date: 03/26/2020
// Section: 512
// E-mail: ims43@tamu.edu 
// Description: Implementation of CPU.hdl

// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
	// instruction handling
	Mux16(a=aluOut, b=instruction, sel=notIns15, out=ARegIn);
	Not(in=instruction[15], out=notIns15);
	Or(a=notIns15, b=instruction[5], out=loadSel);
	ARegister(in=ARegIn, load=loadSel, out=ARegOut, out[0..14]=addressM, out=counter);
	And(a=instruction[12], b=instruction[15], out=selAlu);
	Mux16(a=ARegOut, b=inM, sel=selAlu, out=aluY);
	And(a=instruction[4], b=instruction[15], out=loadD);
	DRegister(in=aluOut, load=loadD, out=aluX);
	ALU(x=aluX, y=aluY, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=aluOut, out=outM, zr=zero, ng=negative);
	And(a=instruction[3], b=instruction[15], out=writeM);
	
	// jump command select
	Not(in=zero, out=notZero);
	Not(in=negative, out=notNegative);
	And(a=notZero, b=notNegative, out=positive);
	And(a=instruction[15], b=instruction[0], out=jgt);
	And(a=positive, b=jgt, out=jge);
	And(a=instruction[15], b=instruction[1], out=jeq);
	And(a=zero, b=jeq, out=loadA);
	And(a=instruction[15], b=instruction[2], out=jlt);
	And(a=negative, b=jlt, out=loadB);
	Or(a=jge, b=loadA, out=loadC);
	Or(a=loadC, b=loadB, out=loadPC);
	
	// update program counter
	PC(in=counter, load=loadPC, inc=true, reset=reset, out[0..14]=pc);

}